package internal_test

import (
	"github.com/mateoferrari97/pathfinder/a_star/internal"
	"github.com/mateoferrari97/pathfinder/internal/maze"
	"github.com/stretchr/testify/require"
	"testing"
)

type randMock struct {
	counter int
}

func (r *randMock) Intn(_ int) int {
	candidate := r.counter
	r.counter++

	if r.counter%100 == 0 {
		r.counter = 1
	}

	return candidate
}

func TestDijkstraPathFinder_Find(t *testing.T) {
	tt := []struct {
		name         string
		expectedPath string
		from         string
		to           string
		findPath     func(finder *internal.AStarPathFinder, from *maze.Position, to *maze.Position) string
	}{
		{
			name: "(0,0) -> (0,0)",
			from: "0,0",
			to:   "0,0",
			findPath: func(finder *internal.AStarPathFinder, from *maze.Position, to *maze.Position) string {
				path, err := finder.Find(from, to)
				if err != nil {
					t.Fatal(err)
				}

				return path[len(path)-1]
			},
			expectedPath: "1000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n",
		},
		{
			name: "(0,0) -> (maxRow-1,maxCol-1)",
			from: "0,0",
			to:   "24,24",
			findPath: func(finder *internal.AStarPathFinder, from *maze.Position, to *maze.Position) string {
				path, err := finder.Find(from, to)
				if err != nil {
					t.Fatal(err)
				}

				return path[len(path)-1]
			},
			expectedPath: "1100000000000000000000000\n1000000000000000000000000\n0100000000000000000000000\n0100000000000000000000000\n0010000000000000000000000\n0010000000000000000000000\n0001000000000000000000000\n0001000000000000000000000\n0000100000000000000000000\n0000100000000000000000000\n0000010000000000000000000\n0000010000000000000000000\n0000001000000000000000000\n0000001000000000000000000\n0000000100000000000000000\n0000000100000000000000000\n0000000010000000000000000\n0000000010000000000000000\n0000000001000000000000000\n0000000001000000000000000\n0000000000100000000000000\n0000000000100000000000000\n0000000000010000000000000\n0000000000011110111111110\n0000000000001001000000001\n",
		},
			{
				name: "(0,0) -> (0,maxCol-1)",
				from: "0,0",
				to:   "0,24",
				findPath: func(finder *internal.AStarPathFinder, from *maze.Position, to *maze.Position) string {
					path, err := finder.Find(from, to)
					if err != nil {
						t.Fatal(err)
					}

					return path[len(path)-1]
				},
				expectedPath: "1100000000000000000000001\n1000000000000000000000010\n0100000000000000000000100\n0011000000000000000001000\n0010000000000000000010000\n0001100000000000000100000\n0001000000000000001000000\n0000110000000000010000000\n0000100000000000100000000\n0000011000000001000000000\n0000010000000010000000000\n0000001111111100000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n",
			},
			{
				name: "(0,0) -> (maxRow-1,0)",
				from: "0,0",
				to:   "24,0",
				findPath: func(finder *internal.AStarPathFinder, from *maze.Position, to *maze.Position) string {
					path, err := finder.Find(from, to)
					if err != nil {
						t.Fatal(err)
					}

					return path[len(path)-1]
				},
				expectedPath: "1000000000000000000000000\n1000000000000000000000000\n0100000000000000000000000\n0100000000000000000000000\n0010000000000000000000000\n0010000000000000000000000\n0001000000000000000000000\n0001000000000000000000000\n0000100000000000000000000\n0000100000000000000000000\n0000010000000000000000000\n0000010000000000000000000\n0000001000000000000000000\n0000001000000000000000000\n0000000100000000000000000\n0000000100000000000000000\n0000000010000000000000000\n0000000100000000000000000\n0000001000000000000000000\n0000010000000000000000000\n0000100000000000000000000\n0001000000000000000000000\n0010000000000000000000000\n0100000000000000000000000\n1000000000000000000000000\n",
			},
			{
				name: "(5,0) -> (24, 5)",
				from: "5,0",
				to:   "24,5",
				findPath: func(finder *internal.AStarPathFinder, from *maze.Position, to *maze.Position) string {
					path, err := finder.Find(from, to)
					if err != nil {
						t.Fatal(err)
					}

					return path[len(path)-1]
				},
				expectedPath: "0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0000000000000000000000000\n0010000000000000000000000\n1110000000000000000000000\n0001000000000000000000000\n0001000000000000000000000\n0000100000000000000000000\n0000100000000000000000000\n0000010000000000000000000\n0000010000000000000000000\n0000001000000000000000000\n0000001000000000000000000\n0000000100000000000000000\n0000000100000000000000000\n0000000010000000000000000\n0000000010000000000000000\n0000000001000000000000000\n0000000001000000000000000\n0000000000100000000000000\n0000000001000000000000000\n0000000010000000000000000\n0000000100000000000000000\n0000011000000000000000000\n",
			},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			// Given
			m := maze.NewMaze()
			r := &randMock{counter: 1}
			finder := internal.NewAStarPathFinder(m, r)
			from, _ := m.GetPosition(tc.from)
			to, _ := m.GetPosition(tc.to)

			// When
			path := tc.findPath(finder, from, to)

			// Then
			require.Equal(t, tc.expectedPath, path)
		})
	}
}
